services:

  books-db:
    image: postgres:14
    container_name: books-db
    profiles: ['MockForDevelopment', 'MockForPullRequest', 'db-only']
    environment:
      POSTGRES_DB: books-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - 10011:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - books-network

  books-api:
    container_name: books-api
    profiles: ['default']
    depends_on:
      books-db:
        condition: service_healthy
    build:
      dockerfile: Dockerfile
      context: .
    ports:
      - 10012:80
    networks:
      - books-network

  books-api-for-e2e:
    container_name: 'books-api-for-e2e'
    profiles: ['MockForPullRequest']
    extends:
      service: books-api
    environment:
      - ASPNETCORE_ENVIRONMENT=MockForPullRequest
      - ASPNETCORE_HTTP_PORTS=80
  
  books-api-for-docker-run:
    container_name: 'books-api-for-docker-run'
    profiles: ['MockForDevelopment']
    extends:
      service: books-api
    environment:
      - ASPNETCORE_ENVIRONMENT=MockForDevelopment
      - ConnectionStrings__DefaultConnection=User ID=postgres;Password=postgres;Host=books-db;port=5432;Database=books-db

  booksMockServer:
    container_name: 'booksMockServer'
    profiles: ['MockForPullRequest']
    image: mockserver/mockserver:5.15.0
    command: -logLevel INFO
    ports:
      - 1080:1080
    volumes:
      - ./initializer.json:/config/initializer.json
    environment:
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/initializer.json
    networks:
      - books-network

  books-karate-tests:
    container_name: 'books-karate-tests'
    profiles: ['MockForPullRequest']
    build:
      dockerfile: KarateDockerfile
      context: .
    depends_on:
      - books-api-for-e2e
      - booksMockServer
    command: ["karate", "/karate"]
    volumes:
      - .:/karate
    environment:
      AUTH_API_ROOT_URL: "http://booksMockServer:1080"
      API_ROOT_URL: "http://books-api-for-e2e"
      SHOULD_USE_FAKE_EXTERNAL_DEPENDENCIES: "true"
    networks:
      - books-network

  production-karate-tests:
    container_name: 'production-karate-tests'
    profiles: ['production-e2e-tests']
    build:
      dockerfile: KarateDockerfile
      context: .
    command: ["karate", "/karate"]
    volumes:
      - .:/karate
    environment:
      AUTH_API_ROOT_URL: "https://innercircle.tourmalinecore.com/api"
      API_ROOT_URL: "https://innercircle.tourmalinecore.com"
      SHOULD_USE_FAKE_EXTERNAL_DEPENDENCIES: "false"
      AUTH_LOGIN: ${AUTH_LOGIN}
      AUTH_PASSWORD: ${AUTH_PASSWORD}
  
  local-env-karate-tests:
    container_name: 'local-env-karate-tests'
    profiles: ['local-env-karate-tests']
    build:
      dockerfile: KarateDockerfile
      context: .
    command: ["karate", "/karate"]
    volumes:
      - .:/karate
    environment:
      AUTH_API_ROOT_URL: "http://localhost:40100/api"
      API_ROOT_URL: "http://localhost:40100"
      SHOULD_USE_FAKE_EXTERNAL_DEPENDENCIES: "false"
      AUTH_LOGIN: "ceo@tourmalinecore.com"
      AUTH_PASSWORD: "cEoPa$$wo1d"

networks:
  books-network:
  