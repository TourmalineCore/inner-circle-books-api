services:

  inner-circle-books-api-db:
    image: postgres:14
    container_name: inner-circle-books-api-db
    profiles:
      - DbOnly
      - MockForDevelopment
      - MockForTests
      - MockForPullRequest
    environment:
      POSTGRES_DB: inner-circle-books-api-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - 7505:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - inner-circle-books-api-network

  inner-circle-books-api:
    container_name: inner-circle-books-api
    profiles:
      - MockForTests
      - MockForPullRequest
    depends_on:
      inner-circle-books-api-db:
        condition: service_healthy
      inner-circle-books-api-mock-server:
        condition: service_started
    build:
      dockerfile: ./Dockerfile
      context: .
      args:
        EXCLUDE_UNIT_TESTS_FROM_BUILD: "true"
    environment:
      - ASPNETCORE_ENVIRONMENT=MockForPullRequest
    ports:
      - 6505:80
    networks:
      - inner-circle-books-api-network
  
  inner-circle-books-api-mock-server:
    container_name: 'inner-circle-books-api-mock-server'
    profiles:
      - MockForDevelopment
      - MockForTests
      - MockForPullRequest
    image: mockserver/mockserver:5.15.0
    command: -logLevel INFO
    ports:
      - 8505:1080
    volumes:
      - ./e2e/mock-server-initialization.json:/config/mock-server-initialization.json
    environment:
      SERVER_PORT: 1080
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/mock-server-initialization.json
    networks:
      - inner-circle-books-api-network
      
  inner-circle-books-api-karate-tests:
    container_name: 'inner-circle-books-api-karate-tests'
    profiles:
      - MockForPullRequest
    build:
      dockerfile: ./e2e/KarateDockerfile
      context: .
    # service_started is not what we need, we need deps to be healthy and ready, this needs to be implemented in api and mock-server first 
    depends_on:
      inner-circle-books-api:
        condition: service_started
      inner-circle-books-api-mock-server:
        condition: service_started
    # restart twice in case of not ready db or network failures
    restart: on-failure:2
    command: ["karate", "/karate"]
    volumes:
      - .:/karate
    environment:
      # here the port is 1080 because it needs to be an internal port, not an external which is 8505 in this case
      AUTH_API_ROOT_URL: "http://inner-circle-books-api-mock-server:1080"
      API_ROOT_URL: "http://inner-circle-books-api"
      SHOULD_USE_FAKE_EXTERNAL_DEPENDENCIES: "true"
    networks:
      - inner-circle-books-api-network

  production-karate-tests:
    container_name: 'production-karate-tests'
    profiles: ['production-e2e-tests']
    build:
      dockerfile: ./e2e/KarateDockerfile
      context: .
    # restart twice in case of not ready db or network failures
    restart: on-failure:2
    command: ["karate", "/karate"]
    volumes:
      - .:/karate
    environment:
      AUTH_API_ROOT_URL: "https://innercircle.tourmalinecore.com/api"
      API_ROOT_URL: "https://innercircle.tourmalinecore.com"
      SHOULD_USE_FAKE_EXTERNAL_DEPENDENCIES: "false"
      AUTH_LOGIN: ${AUTH_LOGIN}
      AUTH_PASSWORD: ${AUTH_PASSWORD}

networks:
  inner-circle-books-api-network:
