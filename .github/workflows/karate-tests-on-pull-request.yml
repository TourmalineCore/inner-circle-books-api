name: Run karate tests in PR

on:
  push:
    branches: [ feature/* ]

jobs:
  # this is needed to wait for the new docker image to be build and published to the registry
  # so that we can use the image to run ui of the needed commit related version as part of local-env
  # the idea is taken from here https://stackoverflow.com/a/71489231
  push_to_registry:
    uses: ./.github/workflows/docker-build-and-push.yml
    # without this it cannot login to the registry
    secrets: inherit

  run-app-and-karate-tests:
    name: Run karate tests
    runs-on: ubuntu-22.04
    needs: [push_to_registry]
    steps:
      - name: Checkout local-env
        uses: actions/checkout@v4
        with:
          repository: TourmalineCore/inner-circle-local-env

      - name: Deploy Local Env to Kind k8s
        uses: devcontainers/ci@v0.3
        with:
          runCmd: |
            # we need to override "latest" image tag of ui inside local-env to run e2e against the current commit ui version and not against latest from master
            yq -i '.image.tag = "sha-${{ github.sha }}"' deploy/values-books-api.yaml.gotmpl

            kind create cluster --name inner-circle --config kind-local-config.yaml --kubeconfig ./.inner-circle-cluster-kubeconfig
            # we need to properly expose KUBECONFIG as an absolute path, pwd prints current working directory path
            export KUBECONFIG=$(pwd)/.inner-circle-cluster-kubeconfig

            helmfile --environment local --namespace local -f deploy/helmfile.yaml apply
          push: never
          # this variable is used by local-env helmfile to use current feature branch helm chart values.yaml file
          # this is needed for a case when as part of the feature the chart was changed and is different from master branch
          # this should properly fill the feature branch name in spite of the pipeline trigger source (PR, commit, etc.)
          # https://stackoverflow.com/a/71158878
          env: |
            INNER_CIRCLE_BOOKS_API_BRANCH=${{ github.head_ref || github.ref_name }}

      - name: Checkout api
        uses: actions/checkout@v4

      - name: Run Karate-tests in local-env
        run: |
          # Get logs
          LOGS=$(docker compose --profile local-env-karate-tests up --abort-on-container-exit)
          # Filter logs and mask sensitive information
          FILTERED_LOGS=$(echo "$LOGS" | sed -E 's/"login":"[^"]*"/"login":"****"/g' \
                                  | sed -E 's/"password":"[^"]*"/"password":"****"/g' \
                                  | sed -E 's/"accessToken":[^,}]*"[^"]*"/"accessToken":"****"/g' \
                                  | sed -E 's/"Authorization":"[^"]*"/"Authorization":"****"/g' \
                                  | sed -E 's/"X-DEBUG-TOKEN":[^,}]*"[^"]*"/"X-DEBUG-TOKEN":"****"/g' \
                                  | sed -E 's/accessToken":\{[^}]*\}/accessToken":{"value":"****"}/g' \
                                  | sed -E 's/X-DEBUG-TOKEN: [^ ]*/X-DEBUG-TOKEN: ****/g' \
                                  | sed -E 's/Authorization: [^ ]*/Authorization: ****/g')
          echo "$FILTERED_LOGS"
          # Count failed and passed tests
          FAILED=$(echo "$FILTERED_LOGS" | grep -oP 'failed: *\K\d+')
          PASSED=$(echo "$FILTERED_LOGS" | grep -oP 'passed: *\K\d+')
          echo "Failed tests: $FAILED"
          echo "Passed tests: $PASSED"
          if [ "$FAILED" -gt 0 ]; then
            echo "Failed tests found! Failing the pipeline..."
            exit 1
          fi
          if [ "$PASSED" -eq 0 ]; then
            echo "No tests passed! Failing the pipeline..."
            exit 1
          fi
